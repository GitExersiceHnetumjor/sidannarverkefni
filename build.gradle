/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

mainClassName='TicServer'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

sourceSets {
    selenium
    seleniumXvfb
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:22.0'
    compile 'com.sparkjava:spark-core:2.6.0'
    // https://mvnrepository.com/artifact/org.json/json
    compile group: 'org.json', name: 'json', version: '20171018'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'

    //Selenium
    seleniumCompile 'junit:junit:4.12'
    //seleniumCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.6.0'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:3.6.0'

    seleniumXvfbCompile 'junit:junit:4.12'
    //seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.6.0'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:3.6.0'
}



task generateJavaDoc(type: Javadoc){
    source = sourceSets.main.allJava
    outputs.upToDateWhen { false }
}

task selenium(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    ant.condition(property: "os", value: "unix" ) { os(family: "unix") }

    doFirst {
        switch(ant.properties.os) {
            case 'unix':
                'build/install/sidannarverkefni/bin/sidannarverkefni &'.execute()
                break
            case 'windows':
                'build\\install\\sidannarverkefni\\bin\\sidannarverkefni.bat'.execute()
                break
        }
    }
}

task filepermission(type: Exec) {
    commandLine 'chmod', '+x', 'bin/xvfb'
}

task seleniumXvfb(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        chmod u+x 'bin/xvfb start'
        'bin/xvfb start'.execute()
        'build/install/sidannarverkefni/bin/sidannarverkefni &'.execute()
    }

    doLast {
        'bin/xvfb stop'.execute()
    }
}

task stage(dependsOn: ['clean', 'installDist'])

build.dependsOn generateJavaDoc